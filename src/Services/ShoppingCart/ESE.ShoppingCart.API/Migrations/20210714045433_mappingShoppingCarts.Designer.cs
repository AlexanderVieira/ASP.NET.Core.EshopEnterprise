// <auto-generated />
using System;
using ESE.ShoppingCart.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ESE.ShoppingCart.API.Migrations
{
    [DbContext(typeof(ShoppingCartContext))]
    [Migration("20210714045433_mappingShoppingCarts")]
    partial class mappingShoppingCarts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ESE.ShoppingCart.API.Models.CustomerCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("VoucherUsed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasName("IDX_Customer");

                    b.ToTable("CustomerCarts");
                });

            modelBuilder.Entity("ESE.ShoppingCart.API.Models.ItemCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCartId");

                    b.ToTable("ItemCarts");
                });

            modelBuilder.Entity("ESE.ShoppingCart.API.Models.CustomerCart", b =>
                {
                    b.OwnsOne("ESE.ShoppingCart.API.Models.Voucher", "Voucher", b1 =>
                        {
                            b1.Property<Guid>("CustomerCartId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("DiscountType")
                                .HasColumnName("DiscountType")
                                .HasColumnType("int");

                            b1.Property<decimal?>("Percentage")
                                .HasColumnName("Percentage")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal?>("TotalDiscount")
                                .HasColumnName("TotalDiscount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("VoucherCode")
                                .HasColumnName("VoucherCode")
                                .HasColumnType("varchar(50)");

                            b1.HasKey("CustomerCartId");

                            b1.ToTable("CustomerCarts");

                            b1.WithOwner()
                                .HasForeignKey("CustomerCartId");
                        });
                });

            modelBuilder.Entity("ESE.ShoppingCart.API.Models.ItemCart", b =>
                {
                    b.HasOne("ESE.ShoppingCart.API.Models.CustomerCart", "CustomerCart")
                        .WithMany("Items")
                        .HasForeignKey("CustomerCartId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
